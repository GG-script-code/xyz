# Improved Leveraged Trading Strategy in R
# Implementing the recommended enhancements for safety and efficiency

# Load required packages
library(quantmod)
library(TTR)
library(PerformanceAnalytics)

# Load historical forex data (e.g., EUR/USD)
getSymbols("EURUSD=X", src="yahoo", from="2015-01-01", to=Sys.Date())
data <- EURUSD=X

# Calculate ATR for volatility-based position sizing
atr <- ATR(HLC(data), n=14)
data$ATR <- atr[, "atr"]

# Enhanced risk management: dynamic stop-loss based on Chandelier Exit
data$ChandelierExit <- runMax(Hi(data), n = 14) - (data$ATR * 2.5)

# Improved position scaling: start small and add on favorable moves
scale_positions <- function(data, atr, risk_percentage, capital) {
  position_sizes <- vector(length = nrow(data))
  for (i in 1:nrow(data)) {
    if (i == 1) {
      position_sizes[i] <- (capital * risk_percentage) / atr[i]
    } else {
      if (Cl(data)[i] > Cl(data)[i - 1]) {
        position_sizes[i] <- position_sizes[i - 1] + ((capital * risk_percentage) / atr[i])
      } else {
        position_sizes[i] <- position_sizes[i - 1]
      }
    }
  }
  return(position_sizes)
}

data$PositionSize <- scale_positions(data, data$ATR, risk_percentage = 0.01, capital = 10000)

# Volatility filters: avoid trading during highly volatile periods
data$VolatilityFilter <- data$ATR < quantile(data$ATR, 0.9, na.rm = TRUE)

# Trend-following logic with additional confirmation
sma_fast <- SMA(Cl(data), n=10)
sma_slow <- SMA(Cl(data), n=50)
data$SMA_Fast <- sma_fast
data$SMA_Slow <- sma_slow
data$RSI <- RSI(Cl(data), n=14)
data$BuySignal <- data$SMA_Fast > data$SMA_Slow & data$RSI > 50 & data$VolatilityFilter
data$SellSignal <- data$SMA_Fast < data$SMA_Slow | !data$VolatilityFilter

# Time-based exit: close the position after a set number of days
close_after_days <- function(data, days = 5) {
  exit_signals <- rep(FALSE, nrow(data))
  for (i in 1:(nrow(data) - days)) {
    if (data$BuySignal[i]) {
      exit_signals[i + days] <- TRUE
    }
  }
  return(exit_signals)
}

data$TimeBasedExit <- close_after_days(data)

# Combine all signals to define entry and exit points
entry_signals <- which(data$BuySignal)
exit_signals <- which(data$SellSignal | data$TimeBasedExit)

# Placeholder for backtesting logic
# This would involve iterating through entry_signals and exit_signals to measure returns, drawdowns, and risk-adjusted performance.

# Visualization of signals
plot(Cl(data), main="EUR/USD Trading Signals", type="l")
lines(data$SMA_Fast, col="green")
lines(data$SMA_Slow, col="red")
points(index(data)[entry_signals], Cl(data)[entry_signals], col="blue", pch=24)
points(index(data)[exit_signals], Cl(data)[exit_signals], col="red", pch=25)

# This code includes all the proposed improvements:
# 1. Advanced stop-loss (Chandelier Exit)
# 2. Position scaling
# 3. Volatility filters
# 4. Multiple confirmation signals
# 5. Time-based exits
